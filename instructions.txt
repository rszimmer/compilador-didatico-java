(1) A implementação atual do compilador didático aceita apenas números com um único
dígito. Modificar o compilador para que ele aceite também números naturais com mais
de um dígito

    Arquivo: Analise Lexica.java
    Linhas: 42-51
    Nota: arquivo.mark é usado para salvar uma parte do arquivo, para que possamos
    ler a próxima e, caso ela não seja um número, possamos voltar para onde foi maracado


(2) A implementação atual do compilador didático aceita apenas as operações de soma e
multiplicação. Modifique o compilador para que aceite também subtração e divisão.
Para essas operações, gerar as instruções SUB e DIV.

    Arquivos: AnaliseLexica.java (1), CodeGen.java (2), Parser.java
    Linhas: 
        (1) 3 (acrescentados os termos DIV e SUB), 62-65
        (2) 20 - 27
        (3) 68-71
    Nota: Para esse exercício a estrutura das demais operações simplesmente foi copiada
    e os termos foram mudados para SUB e DIV com seus respectivos símbolos


(3) O compilador didático possui um back-end que gera código para uma máquina de pilha
hipotética:
CodeGen backend = new CodeGen();
String codigo = backend.geraCodigo(arv);
O back-end recebe como entrada a árvore sintática e percorre essa árvore gerando código
para uma máquina de pilha. Substituir o back-end desse compilador por um back-end
interpretador, ou seja, ao invés de gerar uma String com código para ser executado na
máquina de pilha, o back-end já devolve o resultado da computação da expressão de
entrada.

    Arquivo: Interpretador.java, InterpretadorGen.java
    Linhas: Os dois arquivos inteiros foram criados
    Nota: Interpretador.java é simplesmente uma cópia de Compilador.java, porém chamando funções
    referentes a um interpretador, que foi definido em InterpretadorGen.java. Este por sua vez
    em vez de criar a árvore quando lê as informações que são passadas, faz o cálculo do programa
    por inteiro


(4) Implementar em Java, uma máquina de pilha que execute as instruções geradas pelo
compilador didático. A máquina de pilha deve receber como entrada um arquivo texto
com as instruções e devolver como saída o resultado final da execução dessas instruções.
A classe principal deve se chamar MaquinaPilha. Ex:
    ~$ java MaquinaPilha arquivoDeEntrada

    Arquivos: MaquinaPilha.java, MaquinaPilhaExec.java
    Linhas: Os dois arquivos inteiros foram criandos, juntamente com o exemplo pilhaTeste
    Nota:Em MaquinaPilha.java é feita a leitura do arquivo e do que houver dentro;
    Em MaquinaPilhaExec.java as informações são quebradas em um vetor e em seguida colocadas
    em uma pilha (função setPilha()). Com a pilha organizada, basta fazer a leitura do que foi
    empilhado, desempilhar e assim fazer o cálculo. O que é feito com a função execute(), de forma
    que são possíveis fazer 2 processos: 1. é lido um valor numérico e feito seu retorno,
    2. a função lê uma operação, que irá causar executar a função 2 vezes para encontrar os valores
    numéricos e depois executa a operação com os valores, retornando-os como resposta.
    (Impotante! O arquivo pilhaTeste começa pelas folhas e vai para raiz, já na pilha os itens
    são empilhados da raiz para as folhas, ou seja, ao contrário)